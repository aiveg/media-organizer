# gui.py
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
from file_processor import FileProcessor

class MediaOrganizerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
        self.root.geometry("700x600")
        
        self.selected_folder = tk.StringVar()
        self.delete_empty_var = tk.BooleanVar()
        self.archive_non_empty_var = tk.BooleanVar()
        self.is_processing = False
        
        self.create_widgets()
    
    def create_widgets(self):
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        folder_frame = ttk.Frame(self.root, padding="10")
        folder_frame.pack(fill=tk.X)
        
        ttk.Label(folder_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏:").pack(anchor=tk.W)
        
        folder_select_frame = ttk.Frame(folder_frame)
        folder_select_frame.pack(fill=tk.X, pady=(5, 0))
        
        self.folder_entry = ttk.Entry(folder_select_frame, textvariable=self.selected_folder, state="readonly")
        self.folder_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        ttk.Button(folder_select_frame, text="–û–±–∑–æ—Ä...", command=self.select_folder).pack(side=tk.RIGHT, padx=(5, 0))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        options_frame = ttk.LabelFrame(self.root, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10")
        options_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Checkbutton(options_frame, text="–£–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–∞–ø–∫–∏", variable=self.delete_empty_var).pack(anchor=tk.W)
        ttk.Checkbutton(options_frame, text="–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ø—É—Å—Ç—ã–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–∞–ø–∫–∏", variable=self.archive_non_empty_var).pack(anchor=tk.W)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(self.root)
        button_frame.pack(pady=10)
        
        self.start_button = ttk.Button(button_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é", command=self.start_processing)
        self.start_button.pack(side=tk.LEFT, padx=5)
        
        self.clear_button = ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", command=self.clear_log)
        self.clear_button.pack(side=tk.LEFT, padx=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_frame = ttk.Frame(self.root)
        progress_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.progress = ttk.Progressbar(progress_frame, mode='indeterminate')
        self.progress.pack(fill=tk.X)
        
        self.status_label = ttk.Label(progress_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label.pack(pady=5)
        
        # –õ–æ–≥ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        log_frame = ttk.LabelFrame(self.root, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", padding="10")
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë", command=self.copy_all_text)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ", command=self.copy_selected_text)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_log)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, wrap=tk.WORD)
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.log_text.bind("<Button-2>", self.show_context_menu)  # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ Mac
        self.log_text.bind("<Button-3>", self.show_context_menu)  # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ Windows/Linux
    
    def show_context_menu(self, event):
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()
    
    def copy_all_text(self):
        self.root.clipboard_clear()
        self.root.clipboard_append(self.log_text.get(1.0, tk.END))
        self.log_message("‚úì –í–µ—Å—å —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
    
    def copy_selected_text(self):
        try:
            selected_text = self.log_text.get(tk.SEL_FIRST, tk.SEL_LAST)
            if selected_text:
                self.root.clipboard_clear()
                self.root.clipboard_append(selected_text)
                self.log_message("‚úì –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        except tk.TclError:
            self.log_message("‚ö† –°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def clear_log(self):
        self.log_text.delete(1.0, tk.END)
        self.update_status("–õ–æ–≥ –æ—á–∏—â–µ–Ω")
    
    def select_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.selected_folder.set(folder)
    
    def update_status(self, message):
        self.status_label.config(text=message)
        self.root.update()
    
    def log_message(self, message):
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.see(tk.END)
        self.root.update()
    
    def start_processing(self):
        if self.is_processing:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!")
            return
            
        if not self.selected_folder.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.is_processing = True
        self.start_button.config(text="–û–±—Ä–∞–±–æ—Ç–∫–∞...", state="disabled")
        threading.Thread(target=self.process_files, daemon=True).start()
    
    def process_files(self):
        try:
            self.progress.start()
            self.update_status("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...")
            
            processor = FileProcessor(
                self.selected_folder.get(),
                self.delete_empty_var.get(),
                self.archive_non_empty_var.get()
            )
            
            self.log_message("=" * 50)
            self.log_message(f"üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£: {self.selected_folder.get()}")
            self.log_message("=" * 50)
            
            processed_count, error_count = processor.process_files()
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.log_message("\n" + "=" * 50)
            self.log_message("‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            self.log_message(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {processed_count}")
            self.log_message(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
            self.log_message("=" * 50)
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏
            if processor.processed_files:
                self.log_message("\nüìÅ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:")
                for operation in processor.processed_files:
                    self.log_message(f"  ‚úì {operation}")
            
            if processor.errors:
                self.log_message("\n‚ö†Ô∏è  –û–®–ò–ë–ö–ò:")
                for error in processor.errors:
                    self.log_message(f"  ‚úó {error}")
            
            self.log_message(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–ø–∫–µ: {self.selected_folder.get()}")
            self.update_status(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–ø–µ—Ä–∞—Ü–∏–π: {processed_count}, –û—à–∏–±–æ–∫: {error_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ!", f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û–ø–µ—Ä–∞—Ü–∏–π: {processed_count}\n–û—à–∏–±–æ–∫: {error_count}")
            
        except Exception as e:
            self.log_message(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            self.update_status("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.progress.stop()
            self.is_processing = False
            self.start_button.config(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é", state="normal")

if __name__ == "__main__":
    root = tk.Tk()
    app = MediaOrganizerGUI(root)
    root.mainloop()
